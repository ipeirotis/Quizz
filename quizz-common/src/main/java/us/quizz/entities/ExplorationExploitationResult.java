package us.quizz.entities;

import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;

import java.io.Serializable;
import java.text.NumberFormat;
import java.util.Date;

import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;

@PersistenceCapable(identityType = IdentityType.APPLICATION)
public class ExplorationExploitationResult  implements Serializable {

  private static final long serialVersionUID = 1L;

  public static Key generateKeyFromID(Integer a, Integer b, Integer c) {
    return KeyFactory.createKey(ExplorationExploitationResult.class.getSimpleName(),
        "id_" + a + "_" + "_" + b + "_" +c);
  }

  @PrimaryKey
  @Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)
  private Key key;

  // Number of correct calibration answers
  @Persistent
  private Integer a;

  // Number of incorrect calibration answers
  @Persistent
  private Integer b;

  // Number of exploit actions
  @Persistent
  private Integer c;

  // The expected utility of the next action
  @Persistent
  private double utility;

  // Number of forward steps followed until reaching that decision
  @Persistent
  private int iterations;

  // Whether the next action should be the serving of an exploit question
  @Persistent
  private Boolean actionExploit;

  // The expected utility of exploring (ie. serving a calibration question)
  @Persistent
  private Double exploreUtility;

  // The expected utility of exploiting (ie. serving a collection question)
  @Persistent
  private Double exploitUtility;

  // Last time that we computed the object
  @Persistent
  private Date timestamp;

  public Date getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }

  public ExplorationExploitationResult() {
    this.a = -1;
    this.b = -1;
    this.c = -1;
    this.actionExploit=false;
    this.key = generateKeyFromID(-1,-1,-1);
  }

  public ExplorationExploitationResult(Integer a, Integer b, Integer c) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.key = generateKeyFromID(a,b,c);
  }

  public Integer getA() {
    return a;
  }

  public Boolean getActionExploit() {
    return actionExploit;
  }

  public Integer getB() {
    return b;
  }

  public Integer getC() {
    return c;
  }

  public Double getExploitUtility() {
    return exploitUtility;
  }

  public Double getExploreUtility() {
    return exploreUtility;
  }

  public int getIterations() {
    return iterations;
  }

  public Key getKey() {
    return key;
  }

  public double getUtility() {
    return utility;
  }

  public String print() {
    NumberFormat format = NumberFormat.getInstance();
    format.setMinimumFractionDigits(4);
    format.setMaximumFractionDigits(4);

    StringBuffer sb = new StringBuffer();
    sb.append("[" + a + "," + b + "," + c + "]: V=");
    sb.append(format.format(this.utility));
    sb.append("/R=");
    sb.append(format.format(this.exploreUtility));
    sb.append("/T=");
    sb.append(format.format(this.exploitUtility));
    sb.append("/Exploit=");
    sb.append(this.actionExploit + "\t");
    sb.append("/Iter=");
    sb.append(this.iterations + "\t");
    sb.append("/Time=");
    sb.append(this.timestamp.toString() + "\n");

    return sb.toString();
  }

  public void setA(Integer a) {
    this.a = a;
  }

  public void setActionExploit(Boolean actionExploit) {
    this.actionExploit = actionExploit;
  }

  public void setB(Integer b) {
    this.b = b;
  }

  public void setC(Integer c) {
    this.c = c;
  }

  public void setExploitUtility(Double exploitUtility) {
    this.exploitUtility = exploitUtility;
  }

  public void setExploreUtility(Double exploreUtility) {
    this.exploreUtility = exploreUtility;
  }

  public void setIterations(int iterations) {
    this.iterations = iterations;
  }

  public void setKey(Key key) {
    this.key = key;
  }

  public void setUtility(double utility) {
    this.utility = utility;
  }
}
