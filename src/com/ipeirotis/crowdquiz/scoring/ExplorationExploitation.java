package com.ipeirotis.crowdquiz.scoring;
import java.util.HashMap;


public class ExplorationExploitation {

	Double[][][] values;
	Boolean[][][] exploit;
	Integer N;
	Integer M;
	
	int hits;
	int misses;
	
	public ExplorationExploitation(int n, int m) {
		this.N=n;
		this.M=m;
		
		this.hits=0;
		this.misses=0;
		
		values = new Double[n+1][n+1][m+1];
		exploit = new Boolean[n+1][n+1][m+1];
		for (int i=0; i<=n; i++) {
			for (int j=0; j<=n; j++) {
				for (int k=0; k<=m; k++) {
					values[i][j][k] = Double.NaN;
					exploit[i][j][k] = false;
				}
			}
		}

	}
	
	public double value(Integer a, Integer b, Integer c, Integer n) throws Exception {
		
		double q = 1.0*a/(a+b);
		if (a>N || b>N || c>M) {
			return IG(q,n);
		}
		

		if (!Double.isNaN(values[a][b][c])) {
			return values[a][b][c];
		} 

		double prsurvival = 1;
	
		double exploitNow = IG(q,n);
		double exploitNext = value(a,b,c+1,n);
		double correctNext = value(a+1,b,c,n);
		double incorrectNext = value(a,b+1,c,n);

		
		double exploitValue = exploitNow + exploitNext;
		double exploreValue = q*correctNext + (1-q)*incorrectNext;
		if (exploitValue > exploreValue) {
			exploit[a][b][c] = true;
		}
		
		double result = prsurvival * Math.max(exploitValue, exploreValue);
		
		//System.out.println("a="+a+", b="+b+", c="+c + " r="+result);
		this.values[a][b][c] = result;
		return result;
	}
	
	/**
	 * Computing the entropy of an answer given by a user with quality q (quality=probability of correct)
	 * and n available options in the multiple choice question
	 * @throws Exception 
	 * 
	 */
	private static double entropy(double q, int n) throws Exception {
		if (q==1.0) return 0;
		if (n==1) return 0;
		if (q==0.0) return Math.log(1.0/(n-1))/Math.log(2);
		if (n<1) throw new Exception("Invalid value for n in entropy calculation");
		if (q<0.0 || q>1.0) throw new Exception("Invalid value for q in entropy calculation");
		double entropy = (1-q) * Math.log((1-q)/(n-1))/Math.log(2)+ q*Math.log(q)/Math.log(2);
		return entropy;
	}
	
	private static double IG(double q, int n) throws Exception {
		if (q<1.0/n) q=1.0/n;
		double informationGain = entropy(q,n) - entropy(1.0/n, n);
		//System.out.println("IG("+q+")="+informationGain);
		return informationGain;
	}

	public static void main(String[] args) throws Exception {
		
		ExplorationExploitation t = new ExplorationExploitation(5,200);
		
		int a=0;
		int b=0;
		int c=0;
		System.out.println("Value="+t.value(a,b, c, 2));
		for (int i=1; i<=t.N; i++) {
			for (int j=1; j<=t.N; j++) {
				for (int k=0; k<=t.M; k++) {
					System.out.print("["+i+","+j+","+k+"]="+t.values[i][j][k]+"("+t.exploit[i][j][k]+")\t");
				}
				System.out.println("");
			}
			System.out.println("");
		}
		System.out.println("Hits="+t.hits);
		System.out.println("Misses="+t.misses);

	}
	
}
