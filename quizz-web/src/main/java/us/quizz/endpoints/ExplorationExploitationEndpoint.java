package us.quizz.endpoints;

import java.util.Date;

import javax.inject.Named;

import us.quizz.scoring.ExplorationExploitation;

import com.google.api.server.spi.config.Api;
import com.google.api.server.spi.config.ApiMethod;
import com.google.api.server.spi.config.ApiNamespace;
import com.google.api.server.spi.config.Nullable;
import com.google.appengine.api.taskqueue.Queue;
import com.google.appengine.api.taskqueue.QueueFactory;
import com.google.appengine.api.taskqueue.RetryOptions;
import com.google.appengine.api.taskqueue.TaskOptions;
import com.google.appengine.api.taskqueue.TaskOptions.Method;

@Api(name = "quizz", description = "The API for Quizz.us", version = "v1", namespace = @ApiNamespace(ownerDomain = "www.quizz.us", ownerName = "www.quizz.us", packagePath = "crowdquiz.endpoints"))
public class ExplorationExploitationEndpoint {

	@ApiMethod(name = "explorationExplotation", path="exploreOrExploit/{a}/{b}/{c}")
	public Boolean exploreOrExploit(
			@Named("a") Integer a, 
			@Named("b") Integer b, 
			@Named("c") Integer c) throws Exception {

		ExplorationExploitation ex = new ExplorationExploitation(10);
		ExplorationExploitation.Result r = ex.getUtility(a, b, c, 0.01);
		return r.getAction();
	}
	
	@ApiMethod(name = "cacheExplorationExplotation", path="cacheExplorationExplotation")
	public void cacheExplorationExplotation(@Nullable @Named("sched") Boolean sched) throws Exception {
		if(sched == true)
			scheduleCacheTask();
		else{
			ExplorationExploitation ex = new ExplorationExploitation(10);
			
			//TODO
		}
	}
	
	private void scheduleCacheTask(){
		Queue queue = QueueFactory.getDefaultQueue();
		queue.add(TaskOptions.Builder.withUrl("/cacheExplorationExplotation")
				.etaMillis(new Date().getTime())
				.retryOptions(RetryOptions.Builder.withTaskRetryLimit(3))
		    	.method(Method.GET));
	}

}