/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-09-09 20:42:46 UTC)
 * on 2013-09-13 at 14:42:58 UTC 
 * Modify at your own risk.
 */

package us.quizz.www.crowdquiz.entities.quizz;

/**
 * Service definition for Quizz (v1).
 *
 * <p>
 * The API for Quizz.us
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link QuizzRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Quizz extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.16.0-rc of the quizz library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://crowd-power.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "quizz/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Quizz(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Quizz(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "getNextQuestionInstance".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link GetNextQuestionInstance#execute()} method to invoke the remote
   * operation.
   *
   * @param quiz
   * @return the request
   */
  public GetNextQuestionInstance getNextQuestionInstance(java.lang.String quiz) throws java.io.IOException {
    GetNextQuestionInstance result = new GetNextQuestionInstance(quiz);
    initialize(result);
    return result;
  }

  public class GetNextQuestionInstance extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.QuizQuestionInstance> {

    private static final String REST_PATH = "quizquestioninstance/quiz/{quiz}";

    /**
     * Create a request for the method "getNextQuestionInstance".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link GetNextQuestionInstance#execute()} method to invoke the remote
     * operation. <p> {@link GetNextQuestionInstance#initialize(com.google.api.client.googleapis.servi
     * ces.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param quiz
     * @since 1.13
     */
    protected GetNextQuestionInstance(java.lang.String quiz) {
      super(Quizz.this, "GET", REST_PATH, null, us.quizz.www.crowdquiz.entities.quizz.model.QuizQuestionInstance.class);
      this.quiz = com.google.api.client.util.Preconditions.checkNotNull(quiz, "Required parameter quiz must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetNextQuestionInstance setAlt(java.lang.String alt) {
      return (GetNextQuestionInstance) super.setAlt(alt);
    }

    @Override
    public GetNextQuestionInstance setFields(java.lang.String fields) {
      return (GetNextQuestionInstance) super.setFields(fields);
    }

    @Override
    public GetNextQuestionInstance setKey(java.lang.String key) {
      return (GetNextQuestionInstance) super.setKey(key);
    }

    @Override
    public GetNextQuestionInstance setOauthToken(java.lang.String oauthToken) {
      return (GetNextQuestionInstance) super.setOauthToken(oauthToken);
    }

    @Override
    public GetNextQuestionInstance setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetNextQuestionInstance) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetNextQuestionInstance setQuotaUser(java.lang.String quotaUser) {
      return (GetNextQuestionInstance) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetNextQuestionInstance setUserIp(java.lang.String userIp) {
      return (GetNextQuestionInstance) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String quiz;

    /**

     */
    public java.lang.String getQuiz() {
      return quiz;
    }

    public GetNextQuestionInstance setQuiz(java.lang.String quiz) {
      this.quiz = quiz;
      return this;
    }

    @Override
    public GetNextQuestionInstance set(String parameterName, Object value) {
      return (GetNextQuestionInstance) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getQuiz".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link GetQuiz#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetQuiz getQuiz(java.lang.String id) throws java.io.IOException {
    GetQuiz result = new GetQuiz(id);
    initialize(result);
    return result;
  }

  public class GetQuiz extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.Quiz> {

    private static final String REST_PATH = "quiz/{id}";

    /**
     * Create a request for the method "getQuiz".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link GetQuiz#execute()} method to invoke the remote operation. <p>
     * {@link
     * GetQuiz#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetQuiz(java.lang.String id) {
      super(Quizz.this, "GET", REST_PATH, null, us.quizz.www.crowdquiz.entities.quizz.model.Quiz.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetQuiz setAlt(java.lang.String alt) {
      return (GetQuiz) super.setAlt(alt);
    }

    @Override
    public GetQuiz setFields(java.lang.String fields) {
      return (GetQuiz) super.setFields(fields);
    }

    @Override
    public GetQuiz setKey(java.lang.String key) {
      return (GetQuiz) super.setKey(key);
    }

    @Override
    public GetQuiz setOauthToken(java.lang.String oauthToken) {
      return (GetQuiz) super.setOauthToken(oauthToken);
    }

    @Override
    public GetQuiz setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetQuiz) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetQuiz setQuotaUser(java.lang.String quotaUser) {
      return (GetQuiz) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetQuiz setUserIp(java.lang.String userIp) {
      return (GetQuiz) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public GetQuiz setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public GetQuiz set(String parameterName, Object value) {
      return (GetQuiz) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getQuizPerformance".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link GetQuizPerformance#execute()} method to invoke the remote operation.
   *
   * @param quiz
   * @param user
   * @return the request
   */
  public GetQuizPerformance getQuizPerformance(java.lang.String quiz, java.lang.String user) throws java.io.IOException {
    GetQuizPerformance result = new GetQuizPerformance(quiz, user);
    initialize(result);
    return result;
  }

  public class GetQuizPerformance extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance> {

    private static final String REST_PATH = "quizperformance/quiz/{quiz}/user/{user}";

    /**
     * Create a request for the method "getQuizPerformance".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link GetQuizPerformance#execute()} method to invoke the remote
     * operation. <p> {@link GetQuizPerformance#initialize(com.google.api.client.googleapis.services.A
     * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param quiz
     * @param user
     * @since 1.13
     */
    protected GetQuizPerformance(java.lang.String quiz, java.lang.String user) {
      super(Quizz.this, "GET", REST_PATH, null, us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance.class);
      this.quiz = com.google.api.client.util.Preconditions.checkNotNull(quiz, "Required parameter quiz must be specified.");
      this.user = com.google.api.client.util.Preconditions.checkNotNull(user, "Required parameter user must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetQuizPerformance setAlt(java.lang.String alt) {
      return (GetQuizPerformance) super.setAlt(alt);
    }

    @Override
    public GetQuizPerformance setFields(java.lang.String fields) {
      return (GetQuizPerformance) super.setFields(fields);
    }

    @Override
    public GetQuizPerformance setKey(java.lang.String key) {
      return (GetQuizPerformance) super.setKey(key);
    }

    @Override
    public GetQuizPerformance setOauthToken(java.lang.String oauthToken) {
      return (GetQuizPerformance) super.setOauthToken(oauthToken);
    }

    @Override
    public GetQuizPerformance setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetQuizPerformance) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetQuizPerformance setQuotaUser(java.lang.String quotaUser) {
      return (GetQuizPerformance) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetQuizPerformance setUserIp(java.lang.String userIp) {
      return (GetQuizPerformance) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String quiz;

    /**

     */
    public java.lang.String getQuiz() {
      return quiz;
    }

    public GetQuizPerformance setQuiz(java.lang.String quiz) {
      this.quiz = quiz;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String user;

    /**

     */
    public java.lang.String getUser() {
      return user;
    }

    public GetQuizPerformance setUser(java.lang.String user) {
      this.user = user;
      return this;
    }

    @Override
    public GetQuizPerformance set(String parameterName, Object value) {
      return (GetQuizPerformance) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUser".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link GetUser#execute()} method to invoke the remote operation.
   *
   * @param userid
   * @return the request
   */
  public GetUser getUser(java.lang.String userid) throws java.io.IOException {
    GetUser result = new GetUser(userid);
    initialize(result);
    return result;
  }

  public class GetUser extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.User> {

    private static final String REST_PATH = "user/{userid}";

    /**
     * Create a request for the method "getUser".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link GetUser#execute()} method to invoke the remote operation. <p>
     * {@link
     * GetUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userid
     * @since 1.13
     */
    protected GetUser(java.lang.String userid) {
      super(Quizz.this, "GET", REST_PATH, null, us.quizz.www.crowdquiz.entities.quizz.model.User.class);
      this.userid = com.google.api.client.util.Preconditions.checkNotNull(userid, "Required parameter userid must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUser setAlt(java.lang.String alt) {
      return (GetUser) super.setAlt(alt);
    }

    @Override
    public GetUser setFields(java.lang.String fields) {
      return (GetUser) super.setFields(fields);
    }

    @Override
    public GetUser setKey(java.lang.String key) {
      return (GetUser) super.setKey(key);
    }

    @Override
    public GetUser setOauthToken(java.lang.String oauthToken) {
      return (GetUser) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUser setQuotaUser(java.lang.String quotaUser) {
      return (GetUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUser setUserIp(java.lang.String userIp) {
      return (GetUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String userid;

    /**

     */
    public java.lang.String getUserid() {
      return userid;
    }

    public GetUser setUserid(java.lang.String userid) {
      this.userid = userid;
      return this;
    }

    @Override
    public GetUser set(String parameterName, Object value) {
      return (GetUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUserAnswerFeedback".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link GetUserAnswerFeedback#execute()} method to invoke the remote
   * operation.
   *
   * @param quiz
   * @param userid
   * @param mid
   * @return the request
   */
  public GetUserAnswerFeedback getUserAnswerFeedback(java.lang.String quiz, java.lang.String userid, java.lang.String mid) throws java.io.IOException {
    GetUserAnswerFeedback result = new GetUserAnswerFeedback(quiz, userid, mid);
    initialize(result);
    return result;
  }

  public class GetUserAnswerFeedback extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback> {

    private static final String REST_PATH = "useranswerfeedback/{quiz}/{userid}/{mid}";

    /**
     * Create a request for the method "getUserAnswerFeedback".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link GetUserAnswerFeedback#execute()} method to invoke the remote
     * operation. <p> {@link GetUserAnswerFeedback#initialize(com.google.api.client.googleapis.service
     * s.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param quiz
     * @param userid
     * @param mid
     * @since 1.13
     */
    protected GetUserAnswerFeedback(java.lang.String quiz, java.lang.String userid, java.lang.String mid) {
      super(Quizz.this, "GET", REST_PATH, null, us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback.class);
      this.quiz = com.google.api.client.util.Preconditions.checkNotNull(quiz, "Required parameter quiz must be specified.");
      this.userid = com.google.api.client.util.Preconditions.checkNotNull(userid, "Required parameter userid must be specified.");
      this.mid = com.google.api.client.util.Preconditions.checkNotNull(mid, "Required parameter mid must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUserAnswerFeedback setAlt(java.lang.String alt) {
      return (GetUserAnswerFeedback) super.setAlt(alt);
    }

    @Override
    public GetUserAnswerFeedback setFields(java.lang.String fields) {
      return (GetUserAnswerFeedback) super.setFields(fields);
    }

    @Override
    public GetUserAnswerFeedback setKey(java.lang.String key) {
      return (GetUserAnswerFeedback) super.setKey(key);
    }

    @Override
    public GetUserAnswerFeedback setOauthToken(java.lang.String oauthToken) {
      return (GetUserAnswerFeedback) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUserAnswerFeedback setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUserAnswerFeedback) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUserAnswerFeedback setQuotaUser(java.lang.String quotaUser) {
      return (GetUserAnswerFeedback) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUserAnswerFeedback setUserIp(java.lang.String userIp) {
      return (GetUserAnswerFeedback) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String quiz;

    /**

     */
    public java.lang.String getQuiz() {
      return quiz;
    }

    public GetUserAnswerFeedback setQuiz(java.lang.String quiz) {
      this.quiz = quiz;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String userid;

    /**

     */
    public java.lang.String getUserid() {
      return userid;
    }

    public GetUserAnswerFeedback setUserid(java.lang.String userid) {
      this.userid = userid;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String mid;

    /**

     */
    public java.lang.String getMid() {
      return mid;
    }

    public GetUserAnswerFeedback setMid(java.lang.String mid) {
      this.mid = mid;
      return this;
    }

    @Override
    public GetUserAnswerFeedback set(String parameterName, Object value) {
      return (GetUserAnswerFeedback) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertQuiz".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link InsertQuiz#execute()} method to invoke the remote operation.
   *
   * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.Quiz}
   * @return the request
   */
  public InsertQuiz insertQuiz(us.quizz.www.crowdquiz.entities.quizz.model.Quiz content) throws java.io.IOException {
    InsertQuiz result = new InsertQuiz(content);
    initialize(result);
    return result;
  }

  public class InsertQuiz extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.Quiz> {

    private static final String REST_PATH = "quiz";

    /**
     * Create a request for the method "insertQuiz".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link InsertQuiz#execute()} method to invoke the remote operation. <p>
     * {@link
     * InsertQuiz#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.Quiz}
     * @since 1.13
     */
    protected InsertQuiz(us.quizz.www.crowdquiz.entities.quizz.model.Quiz content) {
      super(Quizz.this, "POST", REST_PATH, content, us.quizz.www.crowdquiz.entities.quizz.model.Quiz.class);
    }

    @Override
    public InsertQuiz setAlt(java.lang.String alt) {
      return (InsertQuiz) super.setAlt(alt);
    }

    @Override
    public InsertQuiz setFields(java.lang.String fields) {
      return (InsertQuiz) super.setFields(fields);
    }

    @Override
    public InsertQuiz setKey(java.lang.String key) {
      return (InsertQuiz) super.setKey(key);
    }

    @Override
    public InsertQuiz setOauthToken(java.lang.String oauthToken) {
      return (InsertQuiz) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertQuiz setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertQuiz) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertQuiz setQuotaUser(java.lang.String quotaUser) {
      return (InsertQuiz) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertQuiz setUserIp(java.lang.String userIp) {
      return (InsertQuiz) super.setUserIp(userIp);
    }

    @Override
    public InsertQuiz set(String parameterName, Object value) {
      return (InsertQuiz) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertQuizPerformance".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link InsertQuizPerformance#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance}
   * @return the request
   */
  public InsertQuizPerformance insertQuizPerformance(us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance content) throws java.io.IOException {
    InsertQuizPerformance result = new InsertQuizPerformance(content);
    initialize(result);
    return result;
  }

  public class InsertQuizPerformance extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance> {

    private static final String REST_PATH = "quizperformance";

    /**
     * Create a request for the method "insertQuizPerformance".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link InsertQuizPerformance#execute()} method to invoke the remote
     * operation. <p> {@link InsertQuizPerformance#initialize(com.google.api.client.googleapis.service
     * s.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance}
     * @since 1.13
     */
    protected InsertQuizPerformance(us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance content) {
      super(Quizz.this, "POST", REST_PATH, content, us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance.class);
    }

    @Override
    public InsertQuizPerformance setAlt(java.lang.String alt) {
      return (InsertQuizPerformance) super.setAlt(alt);
    }

    @Override
    public InsertQuizPerformance setFields(java.lang.String fields) {
      return (InsertQuizPerformance) super.setFields(fields);
    }

    @Override
    public InsertQuizPerformance setKey(java.lang.String key) {
      return (InsertQuizPerformance) super.setKey(key);
    }

    @Override
    public InsertQuizPerformance setOauthToken(java.lang.String oauthToken) {
      return (InsertQuizPerformance) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertQuizPerformance setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertQuizPerformance) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertQuizPerformance setQuotaUser(java.lang.String quotaUser) {
      return (InsertQuizPerformance) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertQuizPerformance setUserIp(java.lang.String userIp) {
      return (InsertQuizPerformance) super.setUserIp(userIp);
    }

    @Override
    public InsertQuizPerformance set(String parameterName, Object value) {
      return (InsertQuizPerformance) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertUser".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link InsertUser#execute()} method to invoke the remote operation.
   *
   * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.User}
   * @return the request
   */
  public InsertUser insertUser(us.quizz.www.crowdquiz.entities.quizz.model.User content) throws java.io.IOException {
    InsertUser result = new InsertUser(content);
    initialize(result);
    return result;
  }

  public class InsertUser extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.User> {

    private static final String REST_PATH = "user";

    /**
     * Create a request for the method "insertUser".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link InsertUser#execute()} method to invoke the remote operation. <p>
     * {@link
     * InsertUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.User}
     * @since 1.13
     */
    protected InsertUser(us.quizz.www.crowdquiz.entities.quizz.model.User content) {
      super(Quizz.this, "POST", REST_PATH, content, us.quizz.www.crowdquiz.entities.quizz.model.User.class);
    }

    @Override
    public InsertUser setAlt(java.lang.String alt) {
      return (InsertUser) super.setAlt(alt);
    }

    @Override
    public InsertUser setFields(java.lang.String fields) {
      return (InsertUser) super.setFields(fields);
    }

    @Override
    public InsertUser setKey(java.lang.String key) {
      return (InsertUser) super.setKey(key);
    }

    @Override
    public InsertUser setOauthToken(java.lang.String oauthToken) {
      return (InsertUser) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertUser setQuotaUser(java.lang.String quotaUser) {
      return (InsertUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertUser setUserIp(java.lang.String userIp) {
      return (InsertUser) super.setUserIp(userIp);
    }

    @Override
    public InsertUser set(String parameterName, Object value) {
      return (InsertUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertUserAnswerFeedback".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link InsertUserAnswerFeedback#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback}
   * @return the request
   */
  public InsertUserAnswerFeedback insertUserAnswerFeedback(us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback content) throws java.io.IOException {
    InsertUserAnswerFeedback result = new InsertUserAnswerFeedback(content);
    initialize(result);
    return result;
  }

  public class InsertUserAnswerFeedback extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback> {

    private static final String REST_PATH = "useranswerfeedback";

    /**
     * Create a request for the method "insertUserAnswerFeedback".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link InsertUserAnswerFeedback#execute()} method to invoke the remote
     * operation. <p> {@link InsertUserAnswerFeedback#initialize(com.google.api.client.googleapis.serv
     * ices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback}
     * @since 1.13
     */
    protected InsertUserAnswerFeedback(us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback content) {
      super(Quizz.this, "POST", REST_PATH, content, us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback.class);
    }

    @Override
    public InsertUserAnswerFeedback setAlt(java.lang.String alt) {
      return (InsertUserAnswerFeedback) super.setAlt(alt);
    }

    @Override
    public InsertUserAnswerFeedback setFields(java.lang.String fields) {
      return (InsertUserAnswerFeedback) super.setFields(fields);
    }

    @Override
    public InsertUserAnswerFeedback setKey(java.lang.String key) {
      return (InsertUserAnswerFeedback) super.setKey(key);
    }

    @Override
    public InsertUserAnswerFeedback setOauthToken(java.lang.String oauthToken) {
      return (InsertUserAnswerFeedback) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertUserAnswerFeedback setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertUserAnswerFeedback) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertUserAnswerFeedback setQuotaUser(java.lang.String quotaUser) {
      return (InsertUserAnswerFeedback) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertUserAnswerFeedback setUserIp(java.lang.String userIp) {
      return (InsertUserAnswerFeedback) super.setUserIp(userIp);
    }

    @Override
    public InsertUserAnswerFeedback set(String parameterName, Object value) {
      return (InsertUserAnswerFeedback) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listNextQuestions".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link ListNextQuestions#execute()} method to invoke the remote operation.
   *
   * @param quiz
   * @return the request
   */
  public ListNextQuestions listNextQuestions(java.lang.String quiz) throws java.io.IOException {
    ListNextQuestions result = new ListNextQuestions(quiz);
    initialize(result);
    return result;
  }

  public class ListNextQuestions extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.QuizQuestionInstanceCollection> {

    private static final String REST_PATH = "quizquestions/{quiz}";

    /**
     * Create a request for the method "listNextQuestions".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link ListNextQuestions#execute()} method to invoke the remote operation.
     * <p> {@link ListNextQuestions#initialize(com.google.api.client.googleapis.services.AbstractGoogl
     * eClientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @param quiz
     * @since 1.13
     */
    protected ListNextQuestions(java.lang.String quiz) {
      super(Quizz.this, "GET", REST_PATH, null, us.quizz.www.crowdquiz.entities.quizz.model.QuizQuestionInstanceCollection.class);
      this.quiz = com.google.api.client.util.Preconditions.checkNotNull(quiz, "Required parameter quiz must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListNextQuestions setAlt(java.lang.String alt) {
      return (ListNextQuestions) super.setAlt(alt);
    }

    @Override
    public ListNextQuestions setFields(java.lang.String fields) {
      return (ListNextQuestions) super.setFields(fields);
    }

    @Override
    public ListNextQuestions setKey(java.lang.String key) {
      return (ListNextQuestions) super.setKey(key);
    }

    @Override
    public ListNextQuestions setOauthToken(java.lang.String oauthToken) {
      return (ListNextQuestions) super.setOauthToken(oauthToken);
    }

    @Override
    public ListNextQuestions setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListNextQuestions) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListNextQuestions setQuotaUser(java.lang.String quotaUser) {
      return (ListNextQuestions) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListNextQuestions setUserIp(java.lang.String userIp) {
      return (ListNextQuestions) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String quiz;

    /**

     */
    public java.lang.String getQuiz() {
      return quiz;
    }

    public ListNextQuestions setQuiz(java.lang.String quiz) {
      this.quiz = quiz;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer num;

    /**

     */
    public java.lang.Integer getNum() {
      return num;
    }

    public ListNextQuestions setNum(java.lang.Integer num) {
      this.num = num;
      return this;
    }

    @Override
    public ListNextQuestions set(String parameterName, Object value) {
      return (ListNextQuestions) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listQuiz".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link ListQuiz#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListQuiz listQuiz() throws java.io.IOException {
    ListQuiz result = new ListQuiz();
    initialize(result);
    return result;
  }

  public class ListQuiz extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.CollectionResponseQuiz> {

    private static final String REST_PATH = "quiz";

    /**
     * Create a request for the method "listQuiz".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link ListQuiz#execute()} method to invoke the remote operation. <p>
     * {@link
     * ListQuiz#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListQuiz() {
      super(Quizz.this, "GET", REST_PATH, null, us.quizz.www.crowdquiz.entities.quizz.model.CollectionResponseQuiz.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListQuiz setAlt(java.lang.String alt) {
      return (ListQuiz) super.setAlt(alt);
    }

    @Override
    public ListQuiz setFields(java.lang.String fields) {
      return (ListQuiz) super.setFields(fields);
    }

    @Override
    public ListQuiz setKey(java.lang.String key) {
      return (ListQuiz) super.setKey(key);
    }

    @Override
    public ListQuiz setOauthToken(java.lang.String oauthToken) {
      return (ListQuiz) super.setOauthToken(oauthToken);
    }

    @Override
    public ListQuiz setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListQuiz) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListQuiz setQuotaUser(java.lang.String quotaUser) {
      return (ListQuiz) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListQuiz setUserIp(java.lang.String userIp) {
      return (ListQuiz) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListQuiz setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListQuiz setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListQuiz set(String parameterName, Object value) {
      return (ListQuiz) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listQuizPerformance".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link ListQuizPerformance#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListQuizPerformance listQuizPerformance() throws java.io.IOException {
    ListQuizPerformance result = new ListQuizPerformance();
    initialize(result);
    return result;
  }

  public class ListQuizPerformance extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.CollectionResponseQuizPerformance> {

    private static final String REST_PATH = "quizperformance";

    /**
     * Create a request for the method "listQuizPerformance".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link ListQuizPerformance#execute()} method to invoke the remote
     * operation. <p> {@link ListQuizPerformance#initialize(com.google.api.client.googleapis.services.
     * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListQuizPerformance() {
      super(Quizz.this, "GET", REST_PATH, null, us.quizz.www.crowdquiz.entities.quizz.model.CollectionResponseQuizPerformance.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListQuizPerformance setAlt(java.lang.String alt) {
      return (ListQuizPerformance) super.setAlt(alt);
    }

    @Override
    public ListQuizPerformance setFields(java.lang.String fields) {
      return (ListQuizPerformance) super.setFields(fields);
    }

    @Override
    public ListQuizPerformance setKey(java.lang.String key) {
      return (ListQuizPerformance) super.setKey(key);
    }

    @Override
    public ListQuizPerformance setOauthToken(java.lang.String oauthToken) {
      return (ListQuizPerformance) super.setOauthToken(oauthToken);
    }

    @Override
    public ListQuizPerformance setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListQuizPerformance) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListQuizPerformance setQuotaUser(java.lang.String quotaUser) {
      return (ListQuizPerformance) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListQuizPerformance setUserIp(java.lang.String userIp) {
      return (ListQuizPerformance) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListQuizPerformance setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListQuizPerformance setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListQuizPerformance set(String parameterName, Object value) {
      return (ListQuizPerformance) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listQuizPerformanceByUser".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link ListQuizPerformanceByUser#execute()} method to invoke the remote
   * operation.
   *
   * @param user
   * @return the request
   */
  public ListQuizPerformanceByUser listQuizPerformanceByUser(java.lang.String user) throws java.io.IOException {
    ListQuizPerformanceByUser result = new ListQuizPerformanceByUser(user);
    initialize(result);
    return result;
  }

  public class ListQuizPerformanceByUser extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.CollectionResponseQuizPerformance> {

    private static final String REST_PATH = "quizperformance/user/{user}";

    /**
     * Create a request for the method "listQuizPerformanceByUser".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link ListQuizPerformanceByUser#execute()} method to invoke the remote
     * operation. <p> {@link ListQuizPerformanceByUser#initialize(com.google.api.client.googleapis.ser
     * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param user
     * @since 1.13
     */
    protected ListQuizPerformanceByUser(java.lang.String user) {
      super(Quizz.this, "GET", REST_PATH, null, us.quizz.www.crowdquiz.entities.quizz.model.CollectionResponseQuizPerformance.class);
      this.user = com.google.api.client.util.Preconditions.checkNotNull(user, "Required parameter user must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListQuizPerformanceByUser setAlt(java.lang.String alt) {
      return (ListQuizPerformanceByUser) super.setAlt(alt);
    }

    @Override
    public ListQuizPerformanceByUser setFields(java.lang.String fields) {
      return (ListQuizPerformanceByUser) super.setFields(fields);
    }

    @Override
    public ListQuizPerformanceByUser setKey(java.lang.String key) {
      return (ListQuizPerformanceByUser) super.setKey(key);
    }

    @Override
    public ListQuizPerformanceByUser setOauthToken(java.lang.String oauthToken) {
      return (ListQuizPerformanceByUser) super.setOauthToken(oauthToken);
    }

    @Override
    public ListQuizPerformanceByUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListQuizPerformanceByUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListQuizPerformanceByUser setQuotaUser(java.lang.String quotaUser) {
      return (ListQuizPerformanceByUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListQuizPerformanceByUser setUserIp(java.lang.String userIp) {
      return (ListQuizPerformanceByUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String user;

    /**

     */
    public java.lang.String getUser() {
      return user;
    }

    public ListQuizPerformanceByUser setUser(java.lang.String user) {
      this.user = user;
      return this;
    }

    @Override
    public ListQuizPerformanceByUser set(String parameterName, Object value) {
      return (ListQuizPerformanceByUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listUser".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link ListUser#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListUser listUser() throws java.io.IOException {
    ListUser result = new ListUser();
    initialize(result);
    return result;
  }

  public class ListUser extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.CollectionResponseUser> {

    private static final String REST_PATH = "user";

    /**
     * Create a request for the method "listUser".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link ListUser#execute()} method to invoke the remote operation. <p>
     * {@link
     * ListUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListUser() {
      super(Quizz.this, "GET", REST_PATH, null, us.quizz.www.crowdquiz.entities.quizz.model.CollectionResponseUser.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListUser setAlt(java.lang.String alt) {
      return (ListUser) super.setAlt(alt);
    }

    @Override
    public ListUser setFields(java.lang.String fields) {
      return (ListUser) super.setFields(fields);
    }

    @Override
    public ListUser setKey(java.lang.String key) {
      return (ListUser) super.setKey(key);
    }

    @Override
    public ListUser setOauthToken(java.lang.String oauthToken) {
      return (ListUser) super.setOauthToken(oauthToken);
    }

    @Override
    public ListUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListUser setQuotaUser(java.lang.String quotaUser) {
      return (ListUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListUser setUserIp(java.lang.String userIp) {
      return (ListUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListUser setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListUser setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListUser set(String parameterName, Object value) {
      return (ListUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listUserAnswerFeedback".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link ListUserAnswerFeedback#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public ListUserAnswerFeedback listUserAnswerFeedback() throws java.io.IOException {
    ListUserAnswerFeedback result = new ListUserAnswerFeedback();
    initialize(result);
    return result;
  }

  public class ListUserAnswerFeedback extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.CollectionResponseUserAnswerFeedback> {

    private static final String REST_PATH = "useranswerfeedback";

    /**
     * Create a request for the method "listUserAnswerFeedback".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link ListUserAnswerFeedback#execute()} method to invoke the remote
     * operation. <p> {@link ListUserAnswerFeedback#initialize(com.google.api.client.googleapis.servic
     * es.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListUserAnswerFeedback() {
      super(Quizz.this, "GET", REST_PATH, null, us.quizz.www.crowdquiz.entities.quizz.model.CollectionResponseUserAnswerFeedback.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListUserAnswerFeedback setAlt(java.lang.String alt) {
      return (ListUserAnswerFeedback) super.setAlt(alt);
    }

    @Override
    public ListUserAnswerFeedback setFields(java.lang.String fields) {
      return (ListUserAnswerFeedback) super.setFields(fields);
    }

    @Override
    public ListUserAnswerFeedback setKey(java.lang.String key) {
      return (ListUserAnswerFeedback) super.setKey(key);
    }

    @Override
    public ListUserAnswerFeedback setOauthToken(java.lang.String oauthToken) {
      return (ListUserAnswerFeedback) super.setOauthToken(oauthToken);
    }

    @Override
    public ListUserAnswerFeedback setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListUserAnswerFeedback) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListUserAnswerFeedback setQuotaUser(java.lang.String quotaUser) {
      return (ListUserAnswerFeedback) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListUserAnswerFeedback setUserIp(java.lang.String userIp) {
      return (ListUserAnswerFeedback) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListUserAnswerFeedback setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListUserAnswerFeedback setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListUserAnswerFeedback set(String parameterName, Object value) {
      return (ListUserAnswerFeedback) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeQuiz".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link RemoveQuiz#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public RemoveQuiz removeQuiz(java.lang.String id) throws java.io.IOException {
    RemoveQuiz result = new RemoveQuiz(id);
    initialize(result);
    return result;
  }

  public class RemoveQuiz extends QuizzRequest<Void> {

    private static final String REST_PATH = "quiz/{id}";

    /**
     * Create a request for the method "removeQuiz".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link RemoveQuiz#execute()} method to invoke the remote operation. <p>
     * {@link
     * RemoveQuiz#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveQuiz(java.lang.String id) {
      super(Quizz.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveQuiz setAlt(java.lang.String alt) {
      return (RemoveQuiz) super.setAlt(alt);
    }

    @Override
    public RemoveQuiz setFields(java.lang.String fields) {
      return (RemoveQuiz) super.setFields(fields);
    }

    @Override
    public RemoveQuiz setKey(java.lang.String key) {
      return (RemoveQuiz) super.setKey(key);
    }

    @Override
    public RemoveQuiz setOauthToken(java.lang.String oauthToken) {
      return (RemoveQuiz) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveQuiz setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveQuiz) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveQuiz setQuotaUser(java.lang.String quotaUser) {
      return (RemoveQuiz) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveQuiz setUserIp(java.lang.String userIp) {
      return (RemoveQuiz) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public RemoveQuiz setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveQuiz set(String parameterName, Object value) {
      return (RemoveQuiz) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeQuizPerformance".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link RemoveQuizPerformance#execute()} method to invoke the remote
   * operation.
   *
   * @param quizid
   * @param userid
   * @return the request
   */
  public RemoveQuizPerformance removeQuizPerformance(java.lang.String quizid, java.lang.String userid) throws java.io.IOException {
    RemoveQuizPerformance result = new RemoveQuizPerformance(quizid, userid);
    initialize(result);
    return result;
  }

  public class RemoveQuizPerformance extends QuizzRequest<Void> {

    private static final String REST_PATH = "quizperformance/{quizid}/{userid}";

    /**
     * Create a request for the method "removeQuizPerformance".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link RemoveQuizPerformance#execute()} method to invoke the remote
     * operation. <p> {@link RemoveQuizPerformance#initialize(com.google.api.client.googleapis.service
     * s.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param quizid
     * @param userid
     * @since 1.13
     */
    protected RemoveQuizPerformance(java.lang.String quizid, java.lang.String userid) {
      super(Quizz.this, "DELETE", REST_PATH, null, Void.class);
      this.quizid = com.google.api.client.util.Preconditions.checkNotNull(quizid, "Required parameter quizid must be specified.");
      this.userid = com.google.api.client.util.Preconditions.checkNotNull(userid, "Required parameter userid must be specified.");
    }

    @Override
    public RemoveQuizPerformance setAlt(java.lang.String alt) {
      return (RemoveQuizPerformance) super.setAlt(alt);
    }

    @Override
    public RemoveQuizPerformance setFields(java.lang.String fields) {
      return (RemoveQuizPerformance) super.setFields(fields);
    }

    @Override
    public RemoveQuizPerformance setKey(java.lang.String key) {
      return (RemoveQuizPerformance) super.setKey(key);
    }

    @Override
    public RemoveQuizPerformance setOauthToken(java.lang.String oauthToken) {
      return (RemoveQuizPerformance) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveQuizPerformance setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveQuizPerformance) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveQuizPerformance setQuotaUser(java.lang.String quotaUser) {
      return (RemoveQuizPerformance) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveQuizPerformance setUserIp(java.lang.String userIp) {
      return (RemoveQuizPerformance) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String quizid;

    /**

     */
    public java.lang.String getQuizid() {
      return quizid;
    }

    public RemoveQuizPerformance setQuizid(java.lang.String quizid) {
      this.quizid = quizid;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String userid;

    /**

     */
    public java.lang.String getUserid() {
      return userid;
    }

    public RemoveQuizPerformance setUserid(java.lang.String userid) {
      this.userid = userid;
      return this;
    }

    @Override
    public RemoveQuizPerformance set(String parameterName, Object value) {
      return (RemoveQuizPerformance) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeUser".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link RemoveUser#execute()} method to invoke the remote operation.
   *
   * @param userid
   * @return the request
   */
  public RemoveUser removeUser(java.lang.String userid) throws java.io.IOException {
    RemoveUser result = new RemoveUser(userid);
    initialize(result);
    return result;
  }

  public class RemoveUser extends QuizzRequest<Void> {

    private static final String REST_PATH = "user/{userid}";

    /**
     * Create a request for the method "removeUser".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link RemoveUser#execute()} method to invoke the remote operation. <p>
     * {@link
     * RemoveUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userid
     * @since 1.13
     */
    protected RemoveUser(java.lang.String userid) {
      super(Quizz.this, "DELETE", REST_PATH, null, Void.class);
      this.userid = com.google.api.client.util.Preconditions.checkNotNull(userid, "Required parameter userid must be specified.");
    }

    @Override
    public RemoveUser setAlt(java.lang.String alt) {
      return (RemoveUser) super.setAlt(alt);
    }

    @Override
    public RemoveUser setFields(java.lang.String fields) {
      return (RemoveUser) super.setFields(fields);
    }

    @Override
    public RemoveUser setKey(java.lang.String key) {
      return (RemoveUser) super.setKey(key);
    }

    @Override
    public RemoveUser setOauthToken(java.lang.String oauthToken) {
      return (RemoveUser) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveUser setQuotaUser(java.lang.String quotaUser) {
      return (RemoveUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveUser setUserIp(java.lang.String userIp) {
      return (RemoveUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String userid;

    /**

     */
    public java.lang.String getUserid() {
      return userid;
    }

    public RemoveUser setUserid(java.lang.String userid) {
      this.userid = userid;
      return this;
    }

    @Override
    public RemoveUser set(String parameterName, Object value) {
      return (RemoveUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeUserAnswerFeedback".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link RemoveUserAnswerFeedback#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemoveUserAnswerFeedback removeUserAnswerFeedback(java.lang.Long id) throws java.io.IOException {
    RemoveUserAnswerFeedback result = new RemoveUserAnswerFeedback(id);
    initialize(result);
    return result;
  }

  public class RemoveUserAnswerFeedback extends QuizzRequest<Void> {

    private static final String REST_PATH = "useranswerfeedback/{id}";

    /**
     * Create a request for the method "removeUserAnswerFeedback".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link RemoveUserAnswerFeedback#execute()} method to invoke the remote
     * operation. <p> {@link RemoveUserAnswerFeedback#initialize(com.google.api.client.googleapis.serv
     * ices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveUserAnswerFeedback(java.lang.Long id) {
      super(Quizz.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveUserAnswerFeedback setAlt(java.lang.String alt) {
      return (RemoveUserAnswerFeedback) super.setAlt(alt);
    }

    @Override
    public RemoveUserAnswerFeedback setFields(java.lang.String fields) {
      return (RemoveUserAnswerFeedback) super.setFields(fields);
    }

    @Override
    public RemoveUserAnswerFeedback setKey(java.lang.String key) {
      return (RemoveUserAnswerFeedback) super.setKey(key);
    }

    @Override
    public RemoveUserAnswerFeedback setOauthToken(java.lang.String oauthToken) {
      return (RemoveUserAnswerFeedback) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveUserAnswerFeedback setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveUserAnswerFeedback) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveUserAnswerFeedback setQuotaUser(java.lang.String quotaUser) {
      return (RemoveUserAnswerFeedback) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveUserAnswerFeedback setUserIp(java.lang.String userIp) {
      return (RemoveUserAnswerFeedback) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveUserAnswerFeedback setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveUserAnswerFeedback set(String parameterName, Object value) {
      return (RemoveUserAnswerFeedback) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateQuiz".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link UpdateQuiz#execute()} method to invoke the remote operation.
   *
   * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.Quiz}
   * @return the request
   */
  public UpdateQuiz updateQuiz(us.quizz.www.crowdquiz.entities.quizz.model.Quiz content) throws java.io.IOException {
    UpdateQuiz result = new UpdateQuiz(content);
    initialize(result);
    return result;
  }

  public class UpdateQuiz extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.Quiz> {

    private static final String REST_PATH = "quiz";

    /**
     * Create a request for the method "updateQuiz".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link UpdateQuiz#execute()} method to invoke the remote operation. <p>
     * {@link
     * UpdateQuiz#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.Quiz}
     * @since 1.13
     */
    protected UpdateQuiz(us.quizz.www.crowdquiz.entities.quizz.model.Quiz content) {
      super(Quizz.this, "PUT", REST_PATH, content, us.quizz.www.crowdquiz.entities.quizz.model.Quiz.class);
    }

    @Override
    public UpdateQuiz setAlt(java.lang.String alt) {
      return (UpdateQuiz) super.setAlt(alt);
    }

    @Override
    public UpdateQuiz setFields(java.lang.String fields) {
      return (UpdateQuiz) super.setFields(fields);
    }

    @Override
    public UpdateQuiz setKey(java.lang.String key) {
      return (UpdateQuiz) super.setKey(key);
    }

    @Override
    public UpdateQuiz setOauthToken(java.lang.String oauthToken) {
      return (UpdateQuiz) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateQuiz setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateQuiz) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateQuiz setQuotaUser(java.lang.String quotaUser) {
      return (UpdateQuiz) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateQuiz setUserIp(java.lang.String userIp) {
      return (UpdateQuiz) super.setUserIp(userIp);
    }

    @Override
    public UpdateQuiz set(String parameterName, Object value) {
      return (UpdateQuiz) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateQuizPerformance".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link UpdateQuizPerformance#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance}
   * @return the request
   */
  public UpdateQuizPerformance updateQuizPerformance(us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance content) throws java.io.IOException {
    UpdateQuizPerformance result = new UpdateQuizPerformance(content);
    initialize(result);
    return result;
  }

  public class UpdateQuizPerformance extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance> {

    private static final String REST_PATH = "quizperformance";

    /**
     * Create a request for the method "updateQuizPerformance".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link UpdateQuizPerformance#execute()} method to invoke the remote
     * operation. <p> {@link UpdateQuizPerformance#initialize(com.google.api.client.googleapis.service
     * s.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance}
     * @since 1.13
     */
    protected UpdateQuizPerformance(us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance content) {
      super(Quizz.this, "PUT", REST_PATH, content, us.quizz.www.crowdquiz.entities.quizz.model.QuizPerformance.class);
    }

    @Override
    public UpdateQuizPerformance setAlt(java.lang.String alt) {
      return (UpdateQuizPerformance) super.setAlt(alt);
    }

    @Override
    public UpdateQuizPerformance setFields(java.lang.String fields) {
      return (UpdateQuizPerformance) super.setFields(fields);
    }

    @Override
    public UpdateQuizPerformance setKey(java.lang.String key) {
      return (UpdateQuizPerformance) super.setKey(key);
    }

    @Override
    public UpdateQuizPerformance setOauthToken(java.lang.String oauthToken) {
      return (UpdateQuizPerformance) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateQuizPerformance setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateQuizPerformance) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateQuizPerformance setQuotaUser(java.lang.String quotaUser) {
      return (UpdateQuizPerformance) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateQuizPerformance setUserIp(java.lang.String userIp) {
      return (UpdateQuizPerformance) super.setUserIp(userIp);
    }

    @Override
    public UpdateQuizPerformance set(String parameterName, Object value) {
      return (UpdateQuizPerformance) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateUser".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link UpdateUser#execute()} method to invoke the remote operation.
   *
   * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.User}
   * @return the request
   */
  public UpdateUser updateUser(us.quizz.www.crowdquiz.entities.quizz.model.User content) throws java.io.IOException {
    UpdateUser result = new UpdateUser(content);
    initialize(result);
    return result;
  }

  public class UpdateUser extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.User> {

    private static final String REST_PATH = "user";

    /**
     * Create a request for the method "updateUser".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link UpdateUser#execute()} method to invoke the remote operation. <p>
     * {@link
     * UpdateUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.User}
     * @since 1.13
     */
    protected UpdateUser(us.quizz.www.crowdquiz.entities.quizz.model.User content) {
      super(Quizz.this, "PUT", REST_PATH, content, us.quizz.www.crowdquiz.entities.quizz.model.User.class);
    }

    @Override
    public UpdateUser setAlt(java.lang.String alt) {
      return (UpdateUser) super.setAlt(alt);
    }

    @Override
    public UpdateUser setFields(java.lang.String fields) {
      return (UpdateUser) super.setFields(fields);
    }

    @Override
    public UpdateUser setKey(java.lang.String key) {
      return (UpdateUser) super.setKey(key);
    }

    @Override
    public UpdateUser setOauthToken(java.lang.String oauthToken) {
      return (UpdateUser) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateUser setQuotaUser(java.lang.String quotaUser) {
      return (UpdateUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateUser setUserIp(java.lang.String userIp) {
      return (UpdateUser) super.setUserIp(userIp);
    }

    @Override
    public UpdateUser set(String parameterName, Object value) {
      return (UpdateUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateUserAnswerFeedback".
   *
   * This request holds the parameters needed by the the quizz server.  After setting any optional
   * parameters, call the {@link UpdateUserAnswerFeedback#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback}
   * @return the request
   */
  public UpdateUserAnswerFeedback updateUserAnswerFeedback(us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback content) throws java.io.IOException {
    UpdateUserAnswerFeedback result = new UpdateUserAnswerFeedback(content);
    initialize(result);
    return result;
  }

  public class UpdateUserAnswerFeedback extends QuizzRequest<us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback> {

    private static final String REST_PATH = "useranswerfeedback";

    /**
     * Create a request for the method "updateUserAnswerFeedback".
     *
     * This request holds the parameters needed by the the quizz server.  After setting any optional
     * parameters, call the {@link UpdateUserAnswerFeedback#execute()} method to invoke the remote
     * operation. <p> {@link UpdateUserAnswerFeedback#initialize(com.google.api.client.googleapis.serv
     * ices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback}
     * @since 1.13
     */
    protected UpdateUserAnswerFeedback(us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback content) {
      super(Quizz.this, "PUT", REST_PATH, content, us.quizz.www.crowdquiz.entities.quizz.model.UserAnswerFeedback.class);
    }

    @Override
    public UpdateUserAnswerFeedback setAlt(java.lang.String alt) {
      return (UpdateUserAnswerFeedback) super.setAlt(alt);
    }

    @Override
    public UpdateUserAnswerFeedback setFields(java.lang.String fields) {
      return (UpdateUserAnswerFeedback) super.setFields(fields);
    }

    @Override
    public UpdateUserAnswerFeedback setKey(java.lang.String key) {
      return (UpdateUserAnswerFeedback) super.setKey(key);
    }

    @Override
    public UpdateUserAnswerFeedback setOauthToken(java.lang.String oauthToken) {
      return (UpdateUserAnswerFeedback) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateUserAnswerFeedback setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateUserAnswerFeedback) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateUserAnswerFeedback setQuotaUser(java.lang.String quotaUser) {
      return (UpdateUserAnswerFeedback) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateUserAnswerFeedback setUserIp(java.lang.String userIp) {
      return (UpdateUserAnswerFeedback) super.setUserIp(userIp);
    }

    @Override
    public UpdateUserAnswerFeedback set(String parameterName, Object value) {
      return (UpdateUserAnswerFeedback) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Quizz}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Quizz}. */
    @Override
    public Quizz build() {
      return new Quizz(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link QuizzRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setQuizzRequestInitializer(
        QuizzRequestInitializer quizzRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(quizzRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
