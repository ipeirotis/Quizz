package us.quizz.servlets;

import java.io.IOException;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import us.quizz.service.ExplorationExploitationService;

import com.google.appengine.api.taskqueue.Queue;
import com.google.appengine.api.taskqueue.QueueFactory;
import com.google.appengine.api.taskqueue.TaskOptions;
import com.google.appengine.api.taskqueue.TaskOptions.Builder;
import com.google.inject.Inject;
import com.google.inject.Singleton;

@SuppressWarnings("serial")
@Singleton
public class CacheExploreExploit extends HttpServlet {
	private ExplorationExploitationService explorationExploitationService;

  @Inject
  public CacheExploreExploit(ExplorationExploitationService explorationExploitationService) {
    this.explorationExploitationService = explorationExploitationService;
  }

  @Override
  public void doGet(HttpServletRequest req, HttpServletResponse resp)
      throws IOException {
    // If we ever need to cache synchronously
    // In general, this risks generating a DeadlineException error
    String executeNow = req.getParameter("now");
    Integer N = Integer.parseInt(req.getParameter("N"));

    if ("true".equals(executeNow)) {
      explorationExploitationService.setN(N);
      explorationExploitationService.cacheValuesInMemcache();
      return;
    } else {
      executeInQueue(N);
    }
  }

  private void executeInQueue(Integer N) {
    Queue queue = QueueFactory.getQueue("survival");
    queue.add(Builder.withUrl("/api/cacheExploreExploit")
        .method(TaskOptions.Method.GET)
        .param("N", N.toString())
        .param("now", "true"));
  }
}
