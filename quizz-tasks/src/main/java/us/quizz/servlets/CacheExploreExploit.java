package us.quizz.servlets;

import com.google.appengine.api.taskqueue.Queue;
import com.google.appengine.api.taskqueue.TaskOptions;
import com.google.appengine.api.taskqueue.TaskOptions.Builder;
import com.google.inject.Inject;
import com.google.inject.Singleton;

import us.quizz.service.ExplorationExploitationService;
import us.quizz.utils.QueueUtils;

import java.io.IOException;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@SuppressWarnings("serial")
@Singleton
public class CacheExploreExploit extends HttpServlet {
  private static final String NUM_CHOICES_PARAM = "numChoices";
  private static final String NUM_CORRECT_PARAM = "numCorrect";
  private static final String NUM_INCORRECT_PARAM = "numIncorrect";
  private static final String NUM_EXPLOIT_PARAM = "numExploit";
  private static final String MAX_CORRECT_PARAM = "maxCorrect";
  private static final String MAX_INCORRECT_PARAM = "maxIncorrect";
  private static final String MAX_EXPLOIT_PARAM = "maxExploit";

  private ExplorationExploitationService explorationExploitationService;

  @Inject
  public CacheExploreExploit(ExplorationExploitationService explorationExploitationService) {
    this.explorationExploitationService = explorationExploitationService;
  }

  // Given the HttpServletRequest, schedules a list of tasks to compute explore-exploit results
  // in the survival queue, one task for each combination of num correct, incorrect, and exploit
  // from 0 to maxParam (inclusive) for each of the three params.
  @Override
  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    Integer numChoices = Integer.parseInt(req.getParameter(NUM_CHOICES_PARAM));
    Integer maxCorrect = Integer.parseInt(req.getParameter(MAX_CORRECT_PARAM));
    Integer maxIncorrect = Integer.parseInt(req.getParameter(MAX_INCORRECT_PARAM));
    Integer maxExploit = Integer.parseInt(req.getParameter(MAX_EXPLOIT_PARAM));

    // TODO(chunhowt): This is wrong, there is no way an exploration-exploitation result to be
    // using the same number of multiple choices globally. We should fix this to be per quiz
    // and backoff to a reasonable default for new quiz.
    explorationExploitationService.setN(numChoices);
    for (Integer numCorrect = 0; numCorrect <= maxCorrect; ++numCorrect) {
      for (Integer numIncorrect = 0; numIncorrect <= maxIncorrect; ++numIncorrect) {
        for (Integer numExploit = 0; numExploit <= maxExploit; ++numExploit) {
          Queue queue = QueueUtils.getSurvivalQueue();
          queue.add(Builder.withUrl("/api/cacheExploreExploit")
              .method(TaskOptions.Method.POST)
              .param(NUM_CHOICES_PARAM, numChoices.toString())
              .param(NUM_CORRECT_PARAM, numCorrect.toString())
              .param(NUM_INCORRECT_PARAM, numIncorrect.toString())
              .param(NUM_EXPLOIT_PARAM, numExploit.toString()));
        }
      }
    }
  }

  // Given the HttpServletRequest, computes the explore-exploitation results for the num correct,
  // num incorrect, num exploit and num multiple choices.
  @Override
  public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    Integer numChoices = Integer.parseInt(req.getParameter(NUM_CHOICES_PARAM));
    Integer numCorrect = Integer.parseInt(req.getParameter(NUM_CORRECT_PARAM));
    Integer numIncorrect = Integer.parseInt(req.getParameter(NUM_INCORRECT_PARAM));
    Integer numExploit = Integer.parseInt(req.getParameter(NUM_EXPLOIT_PARAM));

    explorationExploitationService.setN(numChoices);
    explorationExploitationService.cacheValuesInMemcache(numCorrect, numIncorrect, numExploit);
    explorationExploitationService.saveValuesInDatastore(numCorrect, numIncorrect, numExploit);
  }
}
